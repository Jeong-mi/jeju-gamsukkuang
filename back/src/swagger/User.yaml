paths:
  /user/register:
    post:
      tags:
        - User
      summary: 회원 가입
      description: /user/register로 회원 가입 요청을 보냅니다.
      requestBody:
        required: true
        description: 이메일, 비밀번호, 닉네임을 필수 req.body로 받습니다.
        content:
          application/json:
            schema:
              type: object
              example:
                {
                  "email": "test@elice.io",
                  "password": "1234",
                  "nickname": "test",
                }
      responses:
        "201":
          description: 회원 가입 성공
        "400":
          description: 중복된 이메일이나 닉네임을 보냈을 때 오류가 발생합니다.

  /user/login:
    post:
      tags:
        - User
      summary: 회원 로그인
      description: /user/login으로 회원 로그인 요청을 보냅니다.
      requestBody:
        required: true
        description: 이메일, 비밀번호를 필수 req.body로 받습니다.
        content:
          application/json:
            schema:
              type: object
              example: { "email": "test@elice.io", "password": "1234" }
      responses:
        "201":
          description: 로그인 성공
        "400":
          description: 잘못된 이메일을 보내거나, 비밀번호가 DB와 일치하지 않으면 오류가 발생합니다.

  /user:
    delete:
      tags:
        - User
      summary: 회원 탈퇴
      security:
        - Authorization: []
      description: /user로 회원 탈퇴 요청을 보냅니다. req.body에 어떤 것도 받지 않습니다. 단, 로그인된 사용자만 회원 탈퇴 기능을 사용할 수 있습니다.
      responses:
        "200":
          description: 회원 탈퇴 성공
        "400":
          description: 유효한 토큰을 가지고 있지 않거나, DB에 없는 회원일 시 오류가 발생합니다.

  /user/:
    put:
      tags:
        - User
      summary: 회원 수정
      description: /user로 회원 수정 요청을 보냅니다.
      security:
        - Authorization: []
      requestBody:
        required: true
        description: 수정할 닉네임을 req.body로 받습니다.
        content:
          application/json:
            schema:
              type: object
              example:
                {
                  "nickname": "testEditing",
                }
      responses:
        "201":
          description: 회원 수정 성공
        "400":
          description: 유효한 토큰을 가지고 있지 않거나, DB에 없는 회원이거나, 중복된 닉네임을 보낼 때 오류가 발생합니다.

  /user/exp:
    put:
      tags:
        - User
      summary: 경험치(포인트) 증가
      description: /user/exp로 경험치 증가 요청을 보냅니다.
      security:
        - Authorization: []
      requestBody:
        required: true
        description: 적립할 포인트를 필수로 req.body에서 받습니다.
        content:
          application/json:
            schema:
              type: object
              example:
                {
                  "point": 10,
                }
      responses:
        "201":
          description: 경험치(포인트) 증가 성공
        "400":
          description: 유효한 토큰을 가지고 있지 않거나, DB에 없는 회원이거나, 적립할 포인트를 입력하지 않을 경우 오류가 발생합니다.
