paths:
  /community?page={page}&limit={limit}&head={head}:
    get:
      tags:
        - Community
      summary: 게시글 요청
      description: /community?page={page}&limit={limit}로 게시글 목록을 요청합니다.
      parameters:
        - name: page
          in: query
          required: true
          schema:
            type: integer
            default: 1
          description: 현재 페이지를 의미합니다. ex) 1페이지, 2페이지, ...
        - name: limit
          in: query
          required: true
          schema:
            type: integer
            default: 10
          description: 페이지 당 나타낼 게시글 수를 의미합니다. 따로 쿼리에 적지 않을 경우 기본 10입니다.
        - name: head
          in: query
          schema:
            type: string
          allowEmptyValue: true
          description:
            게시글의 말머리입니다. 말머리 종류는 아래와 같습니다. <br>
            question = 질문 <br>
            info = 정보 <br>
            free = 잡담 <br>
            빈 string을 보낼 시 = 전체 글 요청
      responses:
        "200":
          description: 게시글 요청 성공
        "400":
          description: 잘못된 요청을 보냈을 때 오류가 발생합니다.

  /community/{id}:
    get:
      tags:
        - Community
      summary: 특정 게시글 요청
      security:
        - Authorization: []
      description: /community/{id}로 특정 게시글의 제목과 내용, 그리고 게시글의 댓글을 요청합니다. 단, 로그인 사용자만 사용할 수 있습니다.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: 게시글의 고유 id입니다.
      responses:
        "200":
          description: 게시글 요청 성공
        "400":
          description: 잘못된 요청을 보냈을 때 오류가 발생합니다.
        "403":
          description: 로그인되어 있지 않을 때 오류가 발생합니다.
    post:
      tags:
        - Community
      summary: 게시글 작성
      security:
        - Authorization: []
      description: /community로 게시글 작성 요청을 보냅니다. 단, 로그인 사용자만 사용할 수 있습니다.
      requestBody:
        description: 제목, 내용을 필수 req.body로 받습니다.
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  required: true
                  default: 게시글 테스트 중입니다, 제목.
                content:
                  type: string
                  required: true
                  default: 게시글 테스트 중입니다, 내용.
                head:
                  type: string
                  required: true
                  default: 게시글 테스트 중입니다, 말머리
      responses:
        "201":
          description: 게시글 작성 성공
        "400":
          description: 제목이나 내용이 공란일 때 오류가 발생합니다.
        "403":
          description: 로그인되어 있지 않을 때 오류가 발생합니다.
    put:
      tags:
        - Community
      summary: 특정 게시글 수정
      security:
        - Authorization: []
      description: /community/{id}/으로 특정 게시글의 제목과 내용을 수정 요청합니다. 단, 해당 게시글의 작성자만 사용할 수 있습니다.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: 게시글의 고유 id입니다.
      requestBody:
        description: 제목, 내용을 필수 req.body로 받습니다.
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                title:
                  type: string
                  required: true
                  default: 게시글 수정 테스트 중입니다, 제목.
                content:
                  type: string
                  required: true
                  default: 게시글 수정 테스트 중입니다, 내용.
                head:
                  type: string
                  required: true
                  default: 게시글 수정 테스트 중입니다, 말머리
      responses:
        "201":
          description: 게시글 수정 성공
        "400":
          description: 제목이나 내용이 공란일 때, 사용자가 수정 권한이 없을 때 오류가 발생합니다.
        "403":
          description: 로그인되어 있지 않을 때 오류가 발생합니다.
    delete:
      tags:
        - Community
      summary: 특정 게시글 삭제
      security:
        - Authorization: []
      description: /community/{id}로 특정 게시글의 제목과 내용, 그리고 게시글의 댓글을 요청합니다. 단, 해당 게시글의 작성자만 사용할 수 있습니다.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: 게시글의 고유 id입니다.
      responses:
        "200":
          description: 게시글 삭제 성공
        "400":
          description: 사용자가 삭제 권한이 없을 때, 잘못된 요청을 보냈을 떄 오류가 발생합니다.
        "403":
          description: 로그인되어 있지 않을 때 오류가 발생합니다.

  /community/image:
    post:
      tags:
        - Community
      summary: 게시글 이미지 업로드
      security:
        - Authorization: []
      description: /community/image로 게시글 이미지를 업로드하고, 그 이미지의 url을 받습니다.
      requestBody:
        description: 이미지 파일을 필수 req.body로 받습니다.
        content:
          multipart/form-data:
            schema:
              properties:
                imgFile:
                  type: array
                  items:
                    type: string
                    format: binary

/community/{id}/like:
  put:
    tags:
      - Community
    summary: 해당 게시글 좋아요 추가
    security:
      - Authorization: []
    description: /community/:id/like로 해당 게시글에 좋아요를 추가합니다. req.body에 어떤 것도 받지 않습니다. 단, 로그인한 사용자임과 동시에 해당 게시글에 좋아요를 하지 않은 사용자만 사용 가능합니다.
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        description: 해당 게시글의 ID를 입력합니다.
    responses:
      "200":
        description: 해당 게시글에 좋아요 추가
      "400":
        description: 잘못된 요청이 있을 때 오류가 발생합니다.
      "403":
        description: 로그인되어 있지 않을 때 오류가 발생합니다.

/community/{id}/dislike:
  put:
    tags:
      - Community
    summary: 해당 게시글 좋아요 삭제
    security:
      - Authorization: []
    description: /community/:id/dislike로 해당 게시글에 좋아요를 삭제합니다. req.body에 어떤 것도 받지 않습니다. 단, 로그인한 사용자임과 동시에 해당 게시글에 좋아요를 하지 않은 사용자만 사용 가능합니다.
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        description: 해당 게시글의 ID를 입력합니다.
    responses:
      "200":
        description: 해당 게시글에 좋아요 삭제
      "400":
        description: 잘못된 요청이 있을 때 오류가 발생합니다.
      "403":
        description: 로그인되어 있지 않을 때 오류가 발생합니다.
